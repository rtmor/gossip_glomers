2023-06-18 13:01:16,384{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin broadcast --node-count 1 --time-limit 20 --rate 10
2023-06-18 13:01:16,436{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x5d41b929"
         "maelstrom.db$db$reify__16142@5d41b929"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x797a5b31" "2023-06-18T13:01:16.366-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x13d7d1a8"
         "maelstrom.net$jepsen_net$reify__15251@13d7d1a8"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0x60035f1e"
         "maelstrom.workload.broadcast$client$reify__16644@60035f1e"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x5827908c"
         "java.util.concurrent.CyclicBarrier@5827908c"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x732ffb6a"
         "jepsen.checker$compose$reify__11881@732ffb6a"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "broadcast"
  "--node-count"
  "1"
  "--time-limit"
  "20"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@5ed83e36"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@2459715c"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "broadcast"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x6d3b59e2"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@6d3b59e2"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x164dfad2"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@164dfad2"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 1,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x405a296e"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@405a296e"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x77198cce"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@77198cce"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0xe7b7395"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x383c94ed"
         "maelstrom.net$jepsen_os$reify__15254@383c94ed"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-06-18 13:01:17,593{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-06-18 13:01:17,593{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-06-18 13:01:17,594{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-06-18 13:01:17,596{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-06-18 13:01:17,597{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-06-18 13:01:17,598{GMT}	INFO	[jepsen node n0] maelstrom.process: launching broadcast []
2023-06-18 13:01:17,614{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2023-06-18 13:01:17,627{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2023-06-18 13:01:17,640{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 0 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"),
 :messages [Any],
 {:k :msg_id} Int,
 :in_reply_to Int}

... but instead received

{:in_reply_to 1, :messages {}, :type "read_ok"}

This is malformed because:

{:messages (not (sequential? {}))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16576$read__16577.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$fn__16576$read__16577.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:207)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-18 13:01:17,801{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:broadcast	0
2023-06-18 13:01:22,802{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:info	:broadcast	0	:net-timeout
2023-06-18 13:01:22,803{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:read	nil
2023-06-18 13:01:27,803{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:fail	:read	nil	:net-timeout
2023-06-18 13:01:27,804{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:broadcast	1
2023-06-18 13:01:32,804{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:info	:broadcast	1	:net-timeout
2023-06-18 13:01:32,804{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2023-06-18 13:01:37,805{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:fail	:read	nil	:net-timeout
2023-06-18 13:01:37,805{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2023-06-18 13:01:47,807{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2023-06-18 13:01:52,808{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:fail	:read	nil	:net-timeout
2023-06-18 13:01:52,845{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2023-06-18 13:01:52,877{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2023-06-18 13:01:53,812{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2023-06-18 13:01:53,814{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n0 crashed with exit status 2. Before crashing, it wrote to STDOUT:

{"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
{"src":"n0","dest":"c1","body":{"in_reply_to":1,"type":"topology_ok"}}
{"src":"n0","dest":"c2","body":{"in_reply_to":1,"messages":{},"type":"read_ok"}}

And to STDERR:

2023/06/18 13:01:17 Received {c0 n0 {"type":"init","node_id":"n0","node_ids":["n0"],"msg_id":1}}
2023/06/18 13:01:17 Node n0 initialized
2023/06/18 13:01:17 Sent {"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
2023/06/18 13:01:17 Received {c1 n0 {"type":"topology","topology":{"n0":[]},"msg_id":1}}
2023/06/18 13:01:17 Sent {"src":"n0","dest":"c1","body":{"in_reply_to":1,"type":"topology_ok"}}
2023/06/18 13:01:17 Received {c2 n0 {"type":"read","msg_id":1}}
2023/06/18 13:01:17 Sent {"src":"n0","dest":"c2","body":{"in_reply_to":1,"messages":{},"type":"read_ok"}}
2023/06/18 13:01:17 Received {c3 n0 {"type":"broadcast","message":0,"msg_id":1}}
panic: interface conversion: interface {} is float64, not int

goroutine 22 [running]:
mael.(*BroadcastService).BroadcastHandler(0xc00012a120, {{0xc000130368, 0x2}, {0xc00013036a, 0x2}, {0xc000162030, 0x2b, 0x30}})
	/var/home/rtmoran/repos/rtmor/maelstrom/broadcast.go:53 +0x255
github.com/jepsen-io/maelstrom/demo/go.(*Node).handleMessage(0x0?, 0x0?, {{0xc000130368, 0x2}, {0xc00013036a, 0x2}, {0xc000162030, 0x2b, 0x30}})
	/var/home/rtmoran/.local/share/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20230516124010-52951329816e/node.go:151 +0x96
github.com/jepsen-io/maelstrom/demo/go.(*Node).Run.func2()
	/var/home/rtmoran/.local/share/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20230516124010-52951329816e/node.go:129 +0x88
created by github.com/jepsen-io/maelstrom/demo/go.(*Node).Run
	/var/home/rtmoran/.local/share/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20230516124010-52951329816e/node.go:127 +0x41b

Full STDERR logs are available in /var/home/rtmoran/repos/rtmor/maelstrom/cmd/broadcast/store/broadcast/20230618T130116.366-0400/node-logs/n0.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:833)
